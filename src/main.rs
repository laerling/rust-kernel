#![no_std] // don't link the Rust standard library
#![no_main] // disable all Rust-level entry points

#![feature(custom_test_frameworks)] // don't use the standard test framework. It depends on std
#![test_runner(blog_os::test_runner)] // the function that's going to be called by the main function generated by feature(custom_test_frameworks)
//#![test_runner(test_runner)] seems to work as well
#![reexport_test_harness_main = "test_main"] // rename the main function generated by feature(custom_test_frameworks) so we can call it manually from our entry point function

use core::panic::PanicInfo;
use blog_os::println;


#[no_mangle] // don't mangle the name of this function
pub extern "C" fn _start() -> ! {
    println!("Hello World{}", "!");

    blog_os::init();

    use x86_64::registers::control::Cr3;

    let (level_4_page_table, _cr3_flags) = Cr3::read();
    println!("Level 4 page table at: {:?}",
             level_4_page_table.start_address());

    #[cfg(test)]
    test_main();

    println!("It did not crash!");
    blog_os::hlt_loop();
}

/// This function is called on panic.
#[cfg(not(test))]
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    println!("{}", info);
    blog_os::hlt_loop();
}

/// This function is called on panic, when in test mode
#[cfg(test)]
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    blog_os::test_panic_handler(info)
}
