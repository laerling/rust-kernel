#![no_std] // don't link the Rust standard library
#![no_main] // disable all Rust-level entry points

#![feature(custom_test_frameworks)] // don't use the standard test framework. It depends on std
#![test_runner(blog_os::test_runner)] // the function that's going to be called by the main function generated by feature(custom_test_frameworks)
//#![test_runner(test_runner)] seems to work as well
#![reexport_test_harness_main = "test_main"] // rename the main function generated by feature(custom_test_frameworks) so we can call it manually from our entry point function

use core::panic::PanicInfo;
use blog_os::println;
use bootloader::{entry_point, BootInfo};
use x86_64::{structures::paging::PageTable, VirtAddr};

// set entry function (this macro typechecks the entrypoint functions argument(s))
entry_point!(kernel_main);

// we don't need to declare any extern "C" function anymore, due to the entry_point macro
fn kernel_main(boot_info: &'static BootInfo) -> ! {
    println!("Hello World{}", "!");
    blog_os::init();

    let l4_table = unsafe { blog_os::memory::active_level_4_table(
        boot_info.physical_memory_offset) };
    for (i, entry) in l4_table.iter().enumerate() {
        if !entry.is_unused() {
            println!("L4 Entry {}: {:?}", i, entry);

            // get he physical address from the entry and convert it
            let phys = entry.frame().unwrap().start_address();
            let virt = phys.as_u64() + boot_info.physical_memory_offset;
            let ptr = VirtAddr::new(virt).as_mut_ptr();
            let l3_table: &PageTable = unsafe { &*ptr };

            // print non-empty entries of the level 3 table
            for (i, entry) in l3_table.iter().enumerate() {
                if !entry.is_unused() {
                    println!("  L3 Entry {}: {:?}", i, entry);
                }
            }
        }
    }

    #[cfg(test)]
    test_main();

    println!("It did not crash!");
    blog_os::hlt_loop();
}

/// This function is called on panic.
#[cfg(not(test))]
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    println!("{}", info);
    blog_os::hlt_loop();
}

/// This function is called on panic, when in test mode
#[cfg(test)]
#[panic_handler]
fn panic(info: &PanicInfo) -> ! {
    blog_os::test_panic_handler(info)
}
